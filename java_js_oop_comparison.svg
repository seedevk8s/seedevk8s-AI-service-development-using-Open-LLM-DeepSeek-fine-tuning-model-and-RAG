<svg viewBox="0 0 1000 700" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="1000" height="700" fill="#f8f9fa"/>
  
  <!-- Title -->
  <rect x="50" y="20" width="900" height="60" fill="#2c3e50" rx="10"/>
  <text x="500" y="55" text-anchor="middle" fill="white" font-size="24" font-weight="bold">
    클래스, 객체, 인스턴스: 자바 vs 자바스크립트
  </text>
  
  <!-- Java Section -->
  <rect x="50" y="100" width="430" height="500" fill="#e8f4fd" stroke="#3498db" stroke-width="2" rx="10"/>
  <rect x="60" y="110" width="410" height="40" fill="#3498db" rx="5"/>
  <text x="265" y="135" text-anchor="middle" fill="white" font-size="18" font-weight="bold">
    JAVA (클래스 기반 OOP)
  </text>
  
  <!-- Java Class -->
  <rect x="80" y="170" width="370" height="100" fill="#ffffff" stroke="#2980b9" stroke-width="2" rx="5"/>
  <text x="90" y="190" fill="#2980b9" font-size="14" font-weight="bold">📋 클래스 (Class)</text>
  <text x="90" y="210" fill="#34495e" font-size="12">• 객체를 생성하기 위한 설계도/템플릿</text>
  <text x="90" y="225" fill="#34495e" font-size="12">• 컴파일 타임에 구조가 고정됨</text>
  <text x="90" y="240" fill="#34495e" font-size="12">• 필드와 메서드가 명시적으로 정의됨</text>
  <text x="90" y="255" fill="#27ae60" font-size="11" font-family="monospace">class Car { String brand; void start() {...} }</text>
  
  <!-- Java Object -->
  <rect x="80" y="290" width="370" height="80" fill="#ffffff" stroke="#27ae60" stroke-width="2" rx="5"/>
  <text x="90" y="310" fill="#27ae60" font-size="14" font-weight="bold">🎯 객체 (Object)</text>
  <text x="90" y="330" fill="#34495e" font-size="12">• 클래스의 개념적 정의</text>
  <text x="90" y="345" fill="#34495e" font-size="12">• 실제 메모리에 생성되기 전의 추상적 개념</text>
  <text x="90" y="360" fill="#27ae60" font-size="11" font-family="monospace">Car 클래스로 만들어질 자동차 객체</text>
  
  <!-- Java Instance -->
  <rect x="80" y="390" width="370" height="80" fill="#ffffff" stroke="#e74c3c" stroke-width="2" rx="5"/>
  <text x="90" y="410" fill="#e74c3c" font-size="14" font-weight="bold">🏗️ 인스턴스 (Instance)</text>
  <text x="90" y="430" fill="#34495e" font-size="12">• 메모리에 실제로 생성된 객체</text>
  <text x="90" y="445" fill="#34495e" font-size="12">• new 키워드로 생성</text>
  <text x="90" y="460" fill="#e74c3c" font-size="11" font-family="monospace">Car myCar = new Car(); // 인스턴스 생성</text>
  
  <!-- Java Features -->
  <rect x="80" y="490" width="370" height="80" fill="#ecf0f1" stroke="#95a5a6" stroke-width="1" rx="5"/>
  <text x="90" y="510" fill="#2c3e50" font-size="14" font-weight="bold">🔒 특징</text>
  <text x="90" y="530" fill="#34495e" font-size="12">✓ 강한 타입 시스템</text>
  <text x="90" y="545" fill="#34495e" font-size="12">✓ 컴파일 타임 검증</text>
  <text x="90" y="560" fill="#34495e" font-size="12">✓ 구조가 고정적</text>
  
  <!-- JavaScript Section -->
  <rect x="520" y="100" width="430" height="500" fill="#fff3cd" stroke="#f39c12" stroke-width="2" rx="10"/>
  <rect x="530" y="110" width="410" height="40" fill="#f39c12" rx="5"/>
  <text x="735" y="135" text-anchor="middle" fill="white" font-size="18" font-weight="bold">
    JAVASCRIPT (프로토타입 기반 OOP)
  </text>
  
  <!-- JS Class -->
  <rect x="550" y="170" width="370" height="100" fill="#ffffff" stroke="#e67e22" stroke-width="2" rx="5"/>
  <text x="560" y="190" fill="#e67e22" font-size="14" font-weight="bold">📋 클래스/생성자 함수</text>
  <text x="560" y="210" fill="#34495e" font-size="12">• 실제로는 함수 (ES6+ class는 문법적 설탕)</text>
  <text x="560" y="225" fill="#34495e" font-size="12">• 런타임에 동적으로 수정 가능</text>
  <text x="560" y="240" fill="#34495e" font-size="12">• 프로토타입 기반</text>
  <text x="560" y="255" fill="#d35400" font-size="11" font-family="monospace">function Car() {...} 또는 class Car {...}</text>
  
  <!-- JS Object -->
  <rect x="550" y="290" width="370" height="80" fill="#ffffff" stroke="#27ae60" stroke-width="2" rx="5"/>
  <text x="560" y="310" fill="#27ae60" font-size="14" font-weight="bold">🎯 객체 (Object)</text>
  <text x="560" y="330" fill="#34495e" font-size="12">• 실제 메모리에 존재하는 데이터 구조</text>
  <text x="560" y="345" fill="#34495e" font-size="12">• 키-값 쌍의 속성들을 가짐</text>
  <text x="560" y="360" fill="#27ae60" font-size="11" font-family="monospace">const car = new Car(); // 바로 객체</text>
  
  <!-- JS Instance -->
  <rect x="550" y="390" width="370" height="80" fill="#ffffff" stroke="#e74c3c" stroke-width="2" rx="5"/>
  <text x="560" y="410" fill="#e74c3c" font-size="14" font-weight="bold">🏗️ 인스턴스 = 객체</text>
  <text x="560" y="430" fill="#34495e" font-size="12">• 자바스크립트에서는 객체와 인스턴스가 같음</text>
  <text x="560" y="445" fill="#34495e" font-size="12">• 생성 후에도 속성/메서드 추가 가능</text>
  <text x="560" y="460" fill="#e74c3c" font-size="11" font-family="monospace">car.newProperty = "추가됨"; // 동적 수정</text>
  
  <!-- JS Features -->
  <rect x="550" y="490" width="370" height="80" fill="#ecf0f1" stroke="#95a5a6" stroke-width="1" rx="5"/>
  <text x="560" y="510" fill="#2c3e50" font-size="14" font-weight="bold">🔄 특징</text>
  <text x="560" y="530" fill="#34495e" font-size="12">✓ 동적 타입 시스템</text>
  <text x="560" y="545" fill="#34495e" font-size="12">✓ 런타임 검증</text>
  <text x="560" y="560" fill="#34495e" font-size="12">✓ 구조가 유연함</text>
  
  <!-- Key Differences -->
  <rect x="50" y="620" width="900" height="60" fill="#2c3e50" rx="10"/>
  <text x="70" y="640" fill="white" font-size="14" font-weight="bold">🔍 핵심 차이점:</text>
  <text x="70" y="655" fill="#ecf0f1" font-size="12">• 자바: 클래스 → 객체 개념 → 인스턴스 생성 (명확한 단계)</text>
  <text x="70" y="670" fill="#ecf0f1" font-size="12">• 자바스크립트: 생성자함수/클래스 → 객체 = 인스턴스 (객체와 인스턴스 구분 없음)</text>
  
  <!-- Arrow from Java to JS -->
  <defs>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#34495e"/>
    </marker>
  </defs>
  
  <line x1="480" y1="350" x2="520" y2="350" stroke="#34495e" stroke-width="2" marker-end="url(#arrowhead)"/>
  <text x="500" y="340" text-anchor="middle" fill="#34495e" font-size="12" font-weight="bold">vs</text>
</svg>