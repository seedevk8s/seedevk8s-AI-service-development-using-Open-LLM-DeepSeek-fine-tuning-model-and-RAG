<svg viewBox="0 0 1600 1200" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="1600" height="1200" fill="#f8f9fa"/>
  
  <!-- Title -->
  <rect x="50" y="20" width="1500" height="70" fill="#2c3e50" rx="10"/>
  <text x="800" y="60" text-anchor="middle" fill="white" font-size="28" font-weight="bold">
    Java vs JavaScript 객체 체계 완전 비교 (면접 완벽 대비!)
  </text>
  
  <!-- Divider Line -->
  <line x1="800" y1="110" x2="800" y2="1150" stroke="#6c757d" stroke-width="3" stroke-dasharray="10,5"/>
  <text x="800" y="130" text-anchor="middle" fill="#6c757d" font-size="16" font-weight="bold">VS</text>
  
  <!-- Java Side -->
  <rect x="50" y="110" width="720" height="60" fill="#f44336" rx="8"/>
  <text x="410" y="140" text-anchor="middle" fill="white" font-size="22" font-weight="bold">
    ☕ JAVA (클래스 기반 OOP)
  </text>
  <text x="410" y="160" text-anchor="middle" fill="white" font-size="14">
    컴파일 타임 | 강타입 | JVM 환경 | 패키지 구조
  </text>
  
  <!-- JavaScript Side -->
  <rect x="830" y="110" width="720" height="60" fill="#ffc107" rx="8"/>
  <text x="1190" y="140" text-anchor="middle" fill="white" font-size="22" font-weight="bold">
    🚀 JAVASCRIPT (프로토타입 기반 OOP)
  </text>
  <text x="1190" y="160" text-anchor="middle" fill="white" font-size="14">
    런타임 | 동적타입 | 브라우저/Node.js | 전역/모듈 구조
  </text>
  
  <!-- 1. Built-in Objects Comparison -->
  <rect x="70" y="190" width="680" height="180" fill="#ffebee" stroke="#f44336" stroke-width="2" rx="8"/>
  <rect x="80" y="200" width="660" height="35" fill="#f44336" rx="5"/>
  <text x="410" y="225" text-anchor="middle" fill="white" font-size="16" font-weight="bold">
    1️⃣ 내장 클래스/객체 (Built-in Classes)
  </text>
  
  <text x="90" y="250" fill="#d32f2f" font-size="14" font-weight="bold">📚 Java 내장 클래스들:</text>
  <text x="90" y="270" fill="#2c3e50" font-size="12">• 기본 타입: String, Integer, Boolean, Double</text>
  <text x="90" y="285" fill="#2c3e50" font-size="12">• 컬렉션: ArrayList, HashMap, HashSet, LinkedList</text>
  <text x="90" y="300" fill="#2c3e50" font-size="12">• 유틸리티: Date, Calendar, Math, Random</text>
  
  <rect x="90" y="315" width="640" height="45" fill="#ffffff" stroke="#f44336" rx="3"/>
  <text x="100" y="335" fill="#d32f2f" font-size="11" font-family="monospace">// Java 내장 객체 사용</text>
  <text x="100" y="350" fill="#2c3e50" font-size="11" font-family="monospace">String str = new String("Hello"); ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</text>
  
  <rect x="850" y="190" width="680" height="180" fill="#fff8e1" stroke="#ffc107" stroke-width="2" rx="8"/>
  <rect x="860" y="200" width="660" height="35" fill="#ffc107" rx="5"/>
  <text x="1190" y="225" text-anchor="middle" fill="white" font-size="16" font-weight="bold">
    1️⃣ 내장 객체 (Built-in Objects)
  </text>
  
  <text x="870" y="250" fill="#f57f17" font-size="14" font-weight="bold">📚 JavaScript 내장 객체들:</text>
  <text x="870" y="270" fill="#2c3e50" font-size="12">• 기본 타입: String, Number, Boolean, Object</text>
  <text x="870" y="285" fill="#2c3e50" font-size="12">• 컬렉션: Array, Set, Map, WeakMap</text>
  <text x="870" y="300" fill="#2c3e50" font-size="12">• 유틸리티: Date, Math, JSON, RegExp, Promise</text>
  
  <rect x="870" y="315" width="640" height="45" fill="#ffffff" stroke="#ffc107" rx="3"/>
  <text x="880" y="335" fill="#f57f17" font-size="11" font-family="monospace">// JavaScript 내장 객체 사용</text>
  <text x="880" y="350" fill="#2c3e50" font-size="11" font-family="monospace">const str = new String("Hello"); const arr = new Array(1,2,3);</text>
  
  <!-- 2. Framework/Library Objects -->
  <rect x="70" y="390" width="680" height="180" fill="#f3e5f5" stroke="#9c27b0" stroke-width="2" rx="8"/>
  <rect x="80" y="400" width="660" height="35" fill="#9c27b0" rx="5"/>
  <text x="410" y="425" text-anchor="middle" fill="white" font-size="16" font-weight="bold">
    2️⃣ API/프레임워크 클래스들
  </text>
  
  <text x="90" y="450" fill="#7b1fa2" font-size="14" font-weight="bold">🏗️ Java 생태계:</text>
  <text x="90" y="470" fill="#2c3e50" font-size="12">• Java SE API: java.util.*, java.io.*, java.net.*</text>
  <text x="90" y="485" fill="#2c3e50" font-size="12">• Spring Framework: @Component, @Service, @Repository</text>
  <text x="90" y="500" fill="#2c3e50" font-size="12">• Apache Commons, Hibernate, Jackson 등</text>
  
  <rect x="90" y="515" width="640" height="45" fill="#ffffff" stroke="#9c27b0" rx="3"/>
  <text x="100" y="535" fill="#7b1fa2" font-size="11" font-family="monospace">// Java API/프레임워크 사용</text>
  <text x="100" y="550" fill="#2c3e50" font-size="11" font-family="monospace">@Service public class UserService { ... } // Spring</text>
  
  <rect x="850" y="390" width="680" height="180" fill="#e8f5e8" stroke="#4caf50" stroke-width="2" rx="8"/>
  <rect x="860" y="400" width="660" height="35" fill="#4caf50" rx="5"/>
  <text x="1190" y="425" text-anchor="middle" fill="white" font-size="16" font-weight="bold">
    2️⃣ DOM/BOM 객체들 (브라우저 환경)
  </text>
  
  <text x="870" y="450" fill="#388e3c" font-size="14" font-weight="bold">🌐 브라우저 특화 객체:</text>
  <text x="870" y="470" fill="#2c3e50" font-size="12">• DOM: document, element, node, event</text>
  <text x="870" y="485" fill="#2c3e50" font-size="12">• BOM: window, navigator, location, history</text>
  <text x="870" y="500" fill="#2c3e50" font-size="12">• Web APIs: fetch, localStorage, console</text>
  
  <rect x="870" y="515" width="640" height="45" fill="#ffffff" stroke="#4caf50" rx="3"/>
  <text x="880" y="535" fill="#388e3c" font-size="11" font-family="monospace">// DOM/BOM 객체 사용</text>
  <text x="880" y="550" fill="#2c3e50" font-size="11" font-family="monospace">document.getElementById('app'); window.location.href = '...';</text>
  
  <!-- 3. Third-party Libraries -->
  <rect x="70" y="590" width="680" height="180" fill="#e3f2fd" stroke="#2196f3" stroke-width="2" rx="8"/>
  <rect x="80" y="600" width="660" height="35" fill="#2196f3" rx="5"/>
  <text x="410" y="625" text-anchor="middle" fill="white" font-size="16" font-weight="bold">
    3️⃣ 외부 라이브러리
  </text>
  
  <text x="90" y="650" fill="#1976d2" font-size="14" font-weight="bold">📦 Maven/Gradle 의존성:</text>
  <text x="90" y="670" fill="#2c3e50" font-size="12">• 의존성 관리: pom.xml, build.gradle</text>
  <text x="90" y="685" fill="#2c3e50" font-size="12">• 컴파일 타임에 클래스패스에 포함</text>
  <text x="90" y="700" fill="#2c3e50" font-size="12">• 예: Gson, Apache HttpClient, JUnit</text>
  
  <rect x="90" y="715" width="640" height="45" fill="#ffffff" stroke="#2196f3" rx="3"/>
  <text x="100" y="735" fill="#1976d2" font-size="11" font-family="monospace">// 외부 라이브러리 사용</text>
  <text x="100" y="750" fill="#2c3e50" font-size="11" font-family="monospace">Gson gson = new Gson(); String json = gson.toJson(object);</text>
  
  <rect x="850" y="590" width="680" height="180" fill="#fce4ec" stroke="#e91e63" stroke-width="2" rx="8"/>
  <rect x="860" y="600" width="660" height="35" fill="#e91e63" rx="5"/>
  <text x="1190" y="625" text-anchor="middle" fill="white" font-size="16" font-weight="bold">
    3️⃣ 외부 라이브러리/프레임워크
  </text>
  
  <text x="870" y="650" fill="#c2185b" font-size="14" font-weight="bold">📦 NPM/모듈 시스템:</text>
  <text x="870" y="670" fill="#2c3e50" font-size="12">• 패키지 관리: package.json, npm/yarn</text>
  <text x="870" y="685" fill="#2c3e50" font-size="12">• 런타임에 동적 로딩 가능</text>
  <text x="870" y="700" fill="#2c3e50" font-size="12">• 예: React, Vue, lodash, axios</text>
  
  <rect x="870" y="715" width="640" height="45" fill="#ffffff" stroke="#e91e63" rx="3"/>
  <text x="880" y="735" fill="#c2185b" font-size="11" font-family="monospace">// 외부 라이브러리 사용</text>
  <text x="880" y="750" fill="#2c3e50" font-size="11" font-family="monospace">import React from 'react'; import _ from 'lodash';</text>
  
  <!-- 4. User-defined Objects -->
  <rect x="70" y="790" width="680" height="180" fill="#fff3e0" stroke="#ff9800" stroke-width="2" rx="8"/>
  <rect x="80" y="800" width="660" height="35" fill="#ff9800" rx="5"/>
  <text x="410" y="825" text-anchor="middle" fill="white" font-size="16" font-weight="bold">
    4️⃣ 사용자 정의 클래스
  </text>
  
  <text x="90" y="850" fill="#f57c00" font-size="14" font-weight="bold">👨‍💻 개발자가 만든 클래스:</text>
  <text x="90" y="870" fill="#2c3e50" font-size="12">• 비즈니스 로직 구현</text>
  <text x="90" y="885" fill="#2c3e50" font-size="12">• 상속: extends, implements</text>
  <text x="90" y="900" fill="#2c3e50" font-size="12">• 패키지 구조로 관리</text>
  
  <rect x="90" y="915" width="640" height="45" fill="#ffffff" stroke="#ff9800" rx="3"/>
  <text x="100" y="935" fill="#f57c00" font-size="11" font-family="monospace">// Java 사용자 정의 클래스</text>
  <text x="100" y="950" fill="#2c3e50" font-size="11" font-family="monospace">public class User extends Person implements Serializable { ... }</text>
  
  <rect x="850" y="790" width="680" height="180" fill="#f1f8e9" stroke="#8bc34a" stroke-width="2" rx="8"/>
  <rect x="860" y="800" width="660" height="35" fill="#8bc34a" rx="5"/>
  <text x="1190" y="825" text-anchor="middle" fill="white" font-size="16" font-weight="bold">
    4️⃣ 사용자 정의 객체/클래스
  </text>
  
  <text x="870" y="850" fill="#689f38" font-size="14" font-weight="bold">👨‍💻 개발자가 만든 객체:</text>
  <text x="870" y="870" fill="#2c3e50" font-size="12">• 객체 리터럴, 생성자 함수, ES6 클래스</text>
  <text x="870" y="885" fill="#2c3e50" font-size="12">• 프로토타입 기반 상속</text>
  <text x="870" y="900" fill="#2c3e50" font-size="12">• 모듈 시스템으로 관리</text>
  
  <rect x="870" y="915" width="640" height="45" fill="#ffffff" stroke="#8bc34a" rx="3"/>
  <text x="880" y="935" fill="#689f38" font-size="11" font-family="monospace">// JavaScript 사용자 정의 객체</text>
  <text x="880" y="950" fill="#2c3e50" font-size="11" font-family="monospace">class User extends Person { ... } // ES6 클래스</text>
  
  <!-- Key Differences Section -->
  <rect x="50" y="990" width="1500" height="160" fill="#2c3e50" rx="10"/>
  <text x="800" y="1020" text-anchor="middle" fill="white" font-size="20" font-weight="bold">
    🔥 핵심 차이점 & 면접 포인트
  </text>
  
  <!-- Java Characteristics -->
  <rect x="70" y="1030" width="320" height="110" fill="#34495e" rx="5"/>
  <text x="230" y="1050" text-anchor="middle" fill="#f44336" font-size="14" font-weight="bold">☕ Java 특징</text>
  <text x="80" y="1070" fill="#ecf0f1" font-size="12">✓ 컴파일 타임 검증</text>
  <text x="80" y="1085" fill="#ecf0f1" font-size="12">✓ 강타입 시스템</text>
  <text x="80" y="1100" fill="#ecf0f1" font-size="12">✓ 클래스 기반 상속</text>
  <text x="80" y="1115" fill="#ecf0f1" font-size="12">✓ 패키지 구조</text>
  <text x="80" y="1130" fill="#ecf0f1" font-size="12">✓ JVM 위에서 실행</text>
  
  <!-- JavaScript Characteristics -->
  <rect x="410" y="1030" width="320" height="110" fill="#34495e" rx="5"/>
  <text x="570" y="1050" text-anchor="middle" fill="#ffc107" font-size="14" font-weight="bold">🚀 JavaScript 특징</text>
  <text x="420" y="1070" fill="#ecf0f1" font-size="12">✓ 런타임 검증</text>
  <text x="420" y="1085" fill="#ecf0f1" font-size="12">✓ 동적 타입 시스템</text>
  <text x="420" y="1100" fill="#ecf0f1" font-size="12">✓ 프로토타입 기반 상속</text>
  <text x="420" y="1115" fill="#ecf0f1" font-size="12">✓ 모듈/전역 구조</text>
  <text x="420" y="1130" fill="#ecf0f1" font-size="12">✓ 인터프리터에서 실행</text>
  
  <!-- Interview Tips -->
  <rect x="750" y="1030" width="380" height="110" fill="#34495e" rx="5"/>
  <text x="940" y="1050" text-anchor="middle" fill="#e74c3c" font-size="14" font-weight="bold">🎯 면접 필수 답변</text>
  <text x="760" y="1070" fill="#ecf0f1" font-size="12">Q: "Java와 JavaScript 차이점은?"</text>
  <text x="760" y="1085" fill="#ecf0f1" font-size="12">A: 클래스 기반 vs 프로토타입 기반</text>
  <text x="760" y="1100" fill="#ecf0f1" font-size="12">Q: "DOM이 뭔가요?"</text>
  <text x="760" y="1115" fill="#ecf0f1" font-size="12">A: HTML을 JS 객체로 표현한 것</text>
  <text x="760" y="1130" fill="#ecf0f1" font-size="12">Q: "this의 차이점은?"</text>
  
  <!-- Memory Management -->
  <rect x="1150" y="1030" width="380" height="110" fill="#34495e" rx="5"/>
  <text x="1340" y="1050" text-anchor="middle" fill="#9c27b0" font-size="14" font-weight="bold">💾 메모리 관리</text>
  <text x="1160" y="1070" fill="#ecf0f1" font-size="12">Java: GC(가비지 컬렉션)</text>
  <text x="1160" y="1085" fill="#ecf0f1" font-size="12">JavaScript: 마크&스위프 GC</text>
  <text x="1160" y="1100" fill="#ecf0f1" font-size="12">Java: 힙/스택 명확히 구분</text>
  <text x="1160" y="1115" fill="#ecf0f1" font-size="12">JS: V8 엔진의 힙 관리</text>
  <text x="1160" y="1130" fill="#ecf0f1" font-size="12">둘 다: 참조 타입은 힙에 저장</text>
  
  <!-- Connection arrows -->
  <defs>
    <marker id="arrow" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#6c757d"/>
    </marker>
  </defs>
  
  <!-- Comparison arrows -->
  <line x1="750" y1="280" x2="850" y2="280" stroke="#6c757d" stroke-width="2" marker-end="url(#arrow)"/>
  <line x1="750" y1="480" x2="850" y2="480" stroke="#6c757d" stroke-width="2" marker-end="url(#arrow)"/>
  <line x1="750" y1="680" x2="850" y2="680" stroke="#6c757d" stroke-width="2" marker-end="url(#arrow)"/>
  <line x1="750" y1="880" x2="850" y2="880" stroke="#6c757d" stroke-width="2" marker-end="url(#arrow)"/>
</svg>